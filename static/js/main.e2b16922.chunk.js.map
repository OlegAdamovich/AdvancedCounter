{"version":3,"sources":["components/Button.tsx","components/InputValue.tsx","components/App.tsx","index.tsx"],"names":["Button","props","className","style","onClick","onClickHandler","disabled","title","InputValue","error","type","value","onChange","e","onChangeHandler","currentTarget","min","max","App","useState","counterValue","setCounterValue","minCounterValue","setMinCounterValue","maxCounterValue","setMaxCounterValue","message","setMessage","btnIncDisabled","setBtnIncDisabled","btnResetDisabled","setBtnResetDisabled","btnSetDisabled","setBtnSetDisabled","showSettings","setShowSettings","styleForCounterValue","styleForResetBtnEndCount","styleForValueError","setCurrentCounterValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2b16922.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    disabled: boolean\r\n    style?: string\r\n}\r\n\r\nexport const Button = (props: PropsType) => {\r\n\r\n    return (\r\n        <button className={`Button ${props.style}`} onClick={props.onClickHandler} disabled={props.disabled}>{props.title}</button>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    value: number\r\n    onChangeHandler: (value: number) => void\r\n    error: string\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport const InputValue = (props: PropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeHandler(+e.currentTarget.value);\r\n    }\r\n\r\n    return <input className={props.error} type=\"number\" value={props.value} onChange={onChangeHandler} min={props.min} max={props.max}/>\r\n}","import React, {useState} from \"react\";\r\nimport './../style.css';\r\nimport {Button} from \"./Button\";\r\nimport {InputValue} from \"./InputValue\";\r\n\r\nexport const App = () => {\r\n\r\n    // Local State\r\n    let [counterValue, setCounterValue] = useState(0);\r\n    let [minCounterValue, setMinCounterValue] = useState(0);\r\n    let [maxCounterValue, setMaxCounterValue] = useState(3);\r\n\r\n    let [message, setMessage] = useState('enter correct values and press set');\r\n\r\n    let [btnIncDisabled, setBtnIncDisabled] = useState(false);\r\n    let [btnResetDisabled, setBtnResetDisabled] = useState(true);\r\n    let [btnSetDisabled, setBtnSetDisabled] = useState(false);\r\n\r\n    let [showSettings, setShowSettings] = useState(false);\r\n\r\n    // Styles\r\n    let styleForCounterValue = counterValue === maxCounterValue ? 'Error' : '';\r\n    let styleForResetBtnEndCount = counterValue === maxCounterValue ? 'EndCount' : '';\r\n    let styleForValueError = minCounterValue < 0 || maxCounterValue < 0 || minCounterValue >= maxCounterValue || maxCounterValue <= minCounterValue || maxCounterValue > 10 ? 'Error' : '';\r\n\r\n    // Callbacks\r\n    const incCounterValue = () => {\r\n        setCounterValue(counterValue = counterValue + 1);\r\n        setBtnResetDisabled(false);\r\n        if (counterValue === maxCounterValue) {\r\n            setBtnIncDisabled(true);\r\n        }\r\n    }\r\n\r\n    const resetCounterValue = () => {\r\n        setCounterValue(minCounterValue);\r\n        setBtnIncDisabled(false);\r\n        setBtnResetDisabled(true);\r\n    }\r\n\r\n    const getMinCounterValue = (value: number) => {\r\n        setMinCounterValue(value);\r\n        if (value < 0) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('min value can\\'t be less zero');\r\n        } else if(value === maxCounterValue) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('min value can\\'t be equal max value');\r\n        } else if (value > maxCounterValue) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('min value can\\'t be more max value');\r\n        } else if (maxCounterValue < 0 || maxCounterValue > 10) {\r\n            setBtnSetDisabled(true);\r\n        }else {\r\n            setMessage('enter correct values and press set');\r\n            setBtnSetDisabled(false);\r\n        }\r\n    }\r\n\r\n    const getMaxCounterValue = (value: number) => {\r\n        setMaxCounterValue(value);\r\n        if (value < 0) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('max value can\\'t be less zero');\r\n        } else if (value > 10) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('max value can\\'t be more 10');\r\n        } else if (value === minCounterValue) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('max value can\\'t be equal min value');\r\n        } else if (value < minCounterValue) {\r\n            setBtnSetDisabled(true);\r\n            setMessage('max value can\\'t be less min value');\r\n        } else if (minCounterValue < 0) {\r\n            setBtnSetDisabled(true);\r\n        } else {\r\n            setMessage('enter correct values and press set');\r\n            setBtnSetDisabled(false);\r\n        }\r\n    }\r\n\r\n    const setCurrentCounterValue = () => {\r\n        setShowSettings(!showSettings);\r\n        setCounterValue(minCounterValue);\r\n    }\r\n\r\n    // Min & Max Values For Inputs\r\n    let minValuesForMinInput = -1;\r\n\r\n    return (\r\n        <div className='App'>\r\n            {showSettings ?\r\n                <div className='SettingsBlock'>\r\n                    <div className={`MessageBlock ${styleForValueError}`}>\r\n                        <div>{message}</div>\r\n                    </div>\r\n\r\n                    <div className='InputValuesBlock'>\r\n                        <div className='InputValue'>\r\n                            max value: <InputValue value={maxCounterValue} onChangeHandler={getMaxCounterValue} error={styleForValueError} min={minCounterValue} max={11}/>\r\n                        </div>\r\n\r\n                        <div className='InputValue'>\r\n                            min value: <InputValue value={minCounterValue} onChangeHandler={getMinCounterValue} error={styleForValueError} min={minValuesForMinInput} max={maxCounterValue}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='ButtonsBlock BtnCenter'>\r\n                        <Button title='set' onClickHandler={setCurrentCounterValue} disabled={btnSetDisabled}/>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className='CounterBlock'>\r\n                    <div className='MessageBlock'>\r\n                        <div>{counterValue} - {maxCounterValue}</div>\r\n                    </div>\r\n\r\n                    <div className={`Display ${styleForCounterValue}`}>\r\n                        <div>{counterValue}</div>\r\n                    </div>\r\n                    <div className='ButtonsBlock'>\r\n                        <Button title='inc' onClickHandler={incCounterValue} disabled={btnIncDisabled}/>\r\n                        <Button title='reset' onClickHandler={resetCounterValue} disabled={btnResetDisabled} style={styleForResetBtnEndCount}/>\r\n                        <Button title='set' onClickHandler={setCurrentCounterValue} disabled={btnSetDisabled}/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./components/App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}